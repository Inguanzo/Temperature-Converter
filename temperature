var THEME = require('themes/flat/theme');
var SLIDERS = require('controls/sliders');
var tempVal = "";
var convertedVal = "";
var BUTTONS = require('controls/buttons');
var startMeasurementVal = "";
var endMeasurementVal = "";


//skins and styles
var whiteS = new Skin({fill:"white"});
var greyS = new Skin({fill:"grey"});
var labelStyle = new Style( { font: "bold 40px", color:"white" } );
var bigText = new Style({font:"bold 20px", color:"#333333"});


//slider info
var myLabel = new Label({left:0, right:0, height: 40, top: 100, string: "", style: labelStyle})
var myConvertedLabel = new Label({left:0, right:0, height: 40, bottom: 100, string: "", style: labelStyle})

var mySlider = SLIDERS.HorizontalSlider.template(function($){ return{
	height:50, left:50, right:50,
	behavior: Object.create(SLIDERS.HorizontalSliderBehavior.prototype, {
		onValueChanged: { value: function(container){
			SLIDERS.HorizontalSliderBehavior.prototype.onValueChanged.call(this, container);
			tempVal = this.data.value;
			mainCon.remove(myLabel);
			myLabel = new Label({left:0, right:0, height: 30, top: 40, string: tempVal, style: labelStyle})
			fromOneToOther();		
			mainCon.add(myLabel);	
	}}})
}});


function headerChange() {
	if(changeStart){
	
	};
};


//conversion Function
function convertFunction(measure) {
	convertedVal = tempVal;
	mainCon.remove(myConvertedLabel);
	myConvertedLabel = new Label({left:0, right:0, height: 30, bottom: 40, string: measure, style: labelStyle})
	mainCon.add(myConvertedLabel);
};


///from Fahrenheit,Celsius,Kelvin to all
function fromOneToOther(){
			if (startMeasurementVal == "Fahrenheit") {
				if (endMeasurementVal == "Fahrenheit") {
					convertedVal = tempVal;
					convertFunction(convertedVal);
				}
				else if (endMeasurementVal == "Celsius") {
					convertedVal = (tempVal - 32)/1.8;
					convertFunction(convertedVal);
				}
				else if (endMeasurementVal == "Kelvin") {
					convertedVal = (((tempVal - 32) * 5)/9) + 273.15
					convertFunction(convertedVal);
				}
			}		
			
			//from Celsius to all
			if (startMeasurementVal == "Celsius") {
				if (endMeasurementVal == "Fahrenheit") {
					convertedVal = (tempVal*1.8)+32;
					convertFunction(convertedVal);
				}
				else if (endMeasurementVal == "Celsius") {
					convertedVal = tempVal;
					convertFunction(convertedVal);
				}
				else if (endMeasurementVal == "Kelvin") {
					convertedVal = tempVal + 273.15;
					convertFunction(convertedVal);
				}
			}
			
			//from Kelvin to all
			if (startMeasurementVal == "Kelvin") {
				if (endMeasurementVal == "Fahrenheit") {
					convertedVal = ((tempVal - 273.15) * 1.8) + 32;
					convertFunction(convertedVal);
				}
				else if (endMeasurementVal == "Celsius") {
					convertedVal = tempVal - 273.15;
					convertFunction(convertedVal);
				}
				else if (endMeasurementVal == "Kelvin") {
					convertedVal = tempVal;
					convertFunction(convertedVal);
				}
			}
};


//measurement
var myStartMeasurement = BUTTONS.RadioGroup.template(function($){ return{
	top:100, bottom:50, left:50, right:50,
	behavior: Object.create(BUTTONS.RadioGroupBehavior.prototype, {
		onRadioButtonSelected: { value: function(buttonName){
			startMeasurementVal = buttonName;
	}}})
}});


var myEndMeasurement = BUTTONS.RadioGroup.template(function($){ return{
	bottom:100, left:50, right:50,
	behavior: Object.create(BUTTONS.RadioGroupBehavior.prototype, {
		onRadioButtonSelected: { value: function(buttonName){
			trace("end measurement:" + buttonName + " was selected.\n");
			endMeasurementVal = buttonName;
			
	}}})
}});


//Button
var buttonBehavior = function(content, data){
	BUTTONS.ButtonBehavior.call(this, content, data);
}
buttonBehavior.prototype = Object.create(BUTTONS.ButtonBehavior.prototype, {
	onTap: { value:  function(button){
		if(tempVal != "" && startMeasurementVal !=  "" && endMeasurementVal != ""){
			fromOneToOther();
		}
	}}
});


var myButtonTemplate = BUTTONS.Button.template(function($){ return{
	bottom:10, left:50, right:50,
	contents:[
		new Label({left:0, right:0, height:20, string:$.textForLabel, style:bigText})
	],
	behavior: new buttonBehavior
}});


// calls
var slider = new mySlider({ min:-50, max:115, value:33,  });
var startMeasurement = new myStartMeasurement({ buttonNames: "Fahrenheit,Celsius,Kelvin" });
var endMeasurement = new myEndMeasurement({ buttonNames: "Fahrenheit,Celsius,Kelvin" });
var button = new myButtonTemplate({textForLabel:"Update"});


//main
var mainCon = new Container({left:0, right:0, top:0, bottom:0, skin: greyS});
application.add(mainCon);
mainCon.add(myLabel);
mainCon.add(myConvertedLabel);
mainCon.add(startMeasurement);
mainCon.add(endMeasurement);
mainCon.add(slider);
mainCon.add(button);
